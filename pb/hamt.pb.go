// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: hamt.proto

package pb

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type KV struct {
	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *KV) Reset()      { *m = KV{} }
func (*KV) ProtoMessage() {}
func (*KV) Descriptor() ([]byte, []int) {
	return fileDescriptor_89dab58ee42fbc88, []int{0}
}
func (m *KV) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KV) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *KV) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KV.Merge(m, src)
}
func (m *KV) XXX_Size() int {
	return m.Size()
}
func (m *KV) XXX_DiscardUnknown() {
	xxx_messageInfo_KV.DiscardUnknown(m)
}

var xxx_messageInfo_KV proto.InternalMessageInfo

func (m *KV) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *KV) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type Pointer struct {
	LinkBits []byte `protobuf:"bytes,1,opt,name=link_bits,json=linkBits,proto3" json:"link_bits,omitempty"`
	Kvs      []*KV  `protobuf:"bytes,2,rep,name=kvs,proto3" json:"kvs,omitempty"`
}

func (m *Pointer) Reset()      { *m = Pointer{} }
func (*Pointer) ProtoMessage() {}
func (*Pointer) Descriptor() ([]byte, []int) {
	return fileDescriptor_89dab58ee42fbc88, []int{1}
}
func (m *Pointer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Pointer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Pointer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pointer.Merge(m, src)
}
func (m *Pointer) XXX_Size() int {
	return m.Size()
}
func (m *Pointer) XXX_DiscardUnknown() {
	xxx_messageInfo_Pointer.DiscardUnknown(m)
}

var xxx_messageInfo_Pointer proto.InternalMessageInfo

func (m *Pointer) GetLinkBits() []byte {
	if m != nil {
		return m.LinkBits
	}
	return nil
}

func (m *Pointer) GetKvs() []*KV {
	if m != nil {
		return m.Kvs
	}
	return nil
}

type Node struct {
	Bitfield uint64     `protobuf:"varint,1,opt,name=bitfield,proto3" json:"bitfield,omitempty"`
	Pointers []*Pointer `protobuf:"bytes,2,rep,name=pointers,proto3" json:"pointers,omitempty"`
}

func (m *Node) Reset()      { *m = Node{} }
func (*Node) ProtoMessage() {}
func (*Node) Descriptor() ([]byte, []int) {
	return fileDescriptor_89dab58ee42fbc88, []int{2}
}
func (m *Node) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Node) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Node) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Node.Merge(m, src)
}
func (m *Node) XXX_Size() int {
	return m.Size()
}
func (m *Node) XXX_DiscardUnknown() {
	xxx_messageInfo_Node.DiscardUnknown(m)
}

var xxx_messageInfo_Node proto.InternalMessageInfo

func (m *Node) GetBitfield() uint64 {
	if m != nil {
		return m.Bitfield
	}
	return 0
}

func (m *Node) GetPointers() []*Pointer {
	if m != nil {
		return m.Pointers
	}
	return nil
}

func init() {
	proto.RegisterType((*KV)(nil), "hamt.KV")
	proto.RegisterType((*Pointer)(nil), "hamt.Pointer")
	proto.RegisterType((*Node)(nil), "hamt.Node")
}

func init() { proto.RegisterFile("hamt.proto", fileDescriptor_89dab58ee42fbc88) }

var fileDescriptor_89dab58ee42fbc88 = []byte{
	// 305 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0xcf, 0x4a, 0xf3, 0x40,
	0x14, 0xc5, 0x67, 0xda, 0x7e, 0x9f, 0xe9, 0x58, 0x41, 0x06, 0x17, 0xa5, 0xc2, 0xa5, 0x74, 0x15,
	0xc1, 0x36, 0xa0, 0x6f, 0x90, 0x6d, 0x51, 0x64, 0x16, 0x5d, 0xb8, 0x91, 0x4e, 0x93, 0xa6, 0x43,
	0xfe, 0x4c, 0x4c, 0x26, 0x05, 0x77, 0x3e, 0x82, 0x8f, 0xe1, 0xa3, 0xb8, 0xcc, 0x32, 0x4b, 0x33,
	0xd9, 0xb8, 0xec, 0x23, 0x48, 0x26, 0x5a, 0xdc, 0x9d, 0xdf, 0xbd, 0x9c, 0x7b, 0x2e, 0x87, 0x90,
	0xdd, 0x3a, 0x56, 0x8b, 0x34, 0x93, 0x4a, 0xd2, 0x41, 0xab, 0x27, 0xf3, 0x40, 0xa8, 0x5d, 0xc1,
	0x17, 0x1b, 0x19, 0x3b, 0x81, 0x0c, 0xa4, 0x63, 0x96, 0xbc, 0xd8, 0x1a, 0x32, 0x60, 0x54, 0x67,
	0x9a, 0x5d, 0x93, 0xde, 0x72, 0x45, 0xcf, 0x49, 0x3f, 0xf4, 0x5f, 0xc6, 0x78, 0x8a, 0xed, 0x21,
	0x6b, 0x25, 0xbd, 0x20, 0xff, 0xf6, 0xeb, 0xa8, 0xf0, 0xc7, 0xbd, 0x29, 0xb6, 0x47, 0xac, 0x83,
	0x99, 0x4b, 0x4e, 0x1e, 0xa4, 0x48, 0x94, 0x9f, 0xd1, 0x4b, 0x32, 0x8c, 0x44, 0x12, 0x3e, 0x71,
	0xa1, 0x72, 0x63, 0x1c, 0x31, 0xab, 0x1d, 0xb8, 0x42, 0xe5, 0x74, 0x42, 0xfa, 0xe1, 0x3e, 0x1f,
	0xf7, 0xa6, 0x7d, 0xfb, 0xf4, 0xc6, 0x5a, 0x98, 0x27, 0x97, 0x2b, 0xd6, 0x0e, 0x67, 0x77, 0x64,
	0x70, 0x2f, 0x3d, 0x9f, 0x4e, 0x88, 0xc5, 0x85, 0xda, 0x0a, 0x3f, 0xf2, 0x8c, 0x7f, 0xc0, 0x8e,
	0x4c, 0xaf, 0x88, 0x95, 0x76, 0x39, 0xbf, 0x47, 0xce, 0xba, 0x23, 0x3f, 0xe9, 0xec, 0xb8, 0x76,
	0x79, 0x59, 0x03, 0xaa, 0x6a, 0x40, 0x87, 0x1a, 0xf0, 0xab, 0x06, 0xfc, 0xae, 0x01, 0x7f, 0x68,
	0xc0, 0xa5, 0x06, 0x5c, 0x69, 0xc0, 0x9f, 0x1a, 0xf0, 0x97, 0x06, 0x74, 0xd0, 0x80, 0xdf, 0x1a,
	0x40, 0x65, 0x03, 0xa8, 0x6a, 0x00, 0x3d, 0xda, 0x7f, 0x9a, 0x7a, 0x2e, 0x64, 0x56, 0xc4, 0x1b,
	0x99, 0xa8, 0x4c, 0x46, 0x4e, 0x20, 0xe7, 0x6d, 0xda, 0x5c, 0xa4, 0x91, 0xe7, 0xa4, 0x9c, 0xff,
	0x37, 0x5d, 0xdd, 0x7e, 0x07, 0x00, 0x00, 0xff, 0xff, 0x41, 0x90, 0x5e, 0x02, 0x6e, 0x01, 0x00,
	0x00,
}

func (this *KV) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*KV)
	if !ok {
		that2, ok := that.(KV)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if !bytes.Equal(this.Value, that1.Value) {
		return false
	}
	return true
}
func (this *Pointer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Pointer)
	if !ok {
		that2, ok := that.(Pointer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.LinkBits, that1.LinkBits) {
		return false
	}
	if len(this.Kvs) != len(that1.Kvs) {
		return false
	}
	for i := range this.Kvs {
		if !this.Kvs[i].Equal(that1.Kvs[i]) {
			return false
		}
	}
	return true
}
func (this *Node) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Node)
	if !ok {
		that2, ok := that.(Node)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Bitfield != that1.Bitfield {
		return false
	}
	if len(this.Pointers) != len(that1.Pointers) {
		return false
	}
	for i := range this.Pointers {
		if !this.Pointers[i].Equal(that1.Pointers[i]) {
			return false
		}
	}
	return true
}
func (this *KV) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.KV{")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Pointer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.Pointer{")
	s = append(s, "LinkBits: "+fmt.Sprintf("%#v", this.LinkBits)+",\n")
	if this.Kvs != nil {
		s = append(s, "Kvs: "+fmt.Sprintf("%#v", this.Kvs)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Node) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.Node{")
	s = append(s, "Bitfield: "+fmt.Sprintf("%#v", this.Bitfield)+",\n")
	if this.Pointers != nil {
		s = append(s, "Pointers: "+fmt.Sprintf("%#v", this.Pointers)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringHamt(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *KV) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KV) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintHamt(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintHamt(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	return i, nil
}

func (m *Pointer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Pointer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.LinkBits) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintHamt(dAtA, i, uint64(len(m.LinkBits)))
		i += copy(dAtA[i:], m.LinkBits)
	}
	if len(m.Kvs) > 0 {
		for _, msg := range m.Kvs {
			dAtA[i] = 0x12
			i++
			i = encodeVarintHamt(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Node) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Node) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Bitfield != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHamt(dAtA, i, uint64(m.Bitfield))
	}
	if len(m.Pointers) > 0 {
		for _, msg := range m.Pointers {
			dAtA[i] = 0x12
			i++
			i = encodeVarintHamt(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintHamt(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *KV) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovHamt(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovHamt(uint64(l))
	}
	return n
}

func (m *Pointer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LinkBits)
	if l > 0 {
		n += 1 + l + sovHamt(uint64(l))
	}
	if len(m.Kvs) > 0 {
		for _, e := range m.Kvs {
			l = e.Size()
			n += 1 + l + sovHamt(uint64(l))
		}
	}
	return n
}

func (m *Node) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Bitfield != 0 {
		n += 1 + sovHamt(uint64(m.Bitfield))
	}
	if len(m.Pointers) > 0 {
		for _, e := range m.Pointers {
			l = e.Size()
			n += 1 + l + sovHamt(uint64(l))
		}
	}
	return n
}

func sovHamt(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozHamt(x uint64) (n int) {
	return sovHamt(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *KV) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&KV{`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Pointer) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForKvs := "[]*KV{"
	for _, f := range this.Kvs {
		repeatedStringForKvs += strings.Replace(f.String(), "KV", "KV", 1) + ","
	}
	repeatedStringForKvs += "}"
	s := strings.Join([]string{`&Pointer{`,
		`LinkBits:` + fmt.Sprintf("%v", this.LinkBits) + `,`,
		`Kvs:` + repeatedStringForKvs + `,`,
		`}`,
	}, "")
	return s
}
func (this *Node) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPointers := "[]*Pointer{"
	for _, f := range this.Pointers {
		repeatedStringForPointers += strings.Replace(f.String(), "Pointer", "Pointer", 1) + ","
	}
	repeatedStringForPointers += "}"
	s := strings.Join([]string{`&Node{`,
		`Bitfield:` + fmt.Sprintf("%v", this.Bitfield) + `,`,
		`Pointers:` + repeatedStringForPointers + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringHamt(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *KV) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHamt
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KV: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KV: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHamt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHamt
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHamt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHamt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHamt
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthHamt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHamt(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHamt
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHamt
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Pointer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHamt
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pointer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pointer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LinkBits", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHamt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHamt
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthHamt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LinkBits = append(m.LinkBits[:0], dAtA[iNdEx:postIndex]...)
			if m.LinkBits == nil {
				m.LinkBits = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kvs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHamt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHamt
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHamt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Kvs = append(m.Kvs, &KV{})
			if err := m.Kvs[len(m.Kvs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHamt(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHamt
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHamt
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Node) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHamt
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Node: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Node: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bitfield", wireType)
			}
			m.Bitfield = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHamt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bitfield |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pointers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHamt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHamt
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHamt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pointers = append(m.Pointers, &Pointer{})
			if err := m.Pointers[len(m.Pointers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHamt(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHamt
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHamt
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipHamt(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowHamt
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHamt
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHamt
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthHamt
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthHamt
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowHamt
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipHamt(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthHamt
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthHamt = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowHamt   = fmt.Errorf("proto: integer overflow")
)
